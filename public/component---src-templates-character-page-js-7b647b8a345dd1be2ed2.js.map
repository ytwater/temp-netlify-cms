{"version":3,"sources":["webpack:///./src/templates/character-page.js","webpack:///./src/components/Content.js"],"names":["CharacterPageTemplate","preview","content","contentComponent","PostContent","topImages","topLeftImages","bottomLeftImages","gallery","characters","Content","defaultProps","title","description","CharacterPage","data","post","markdownRemark","site","html","HTMLContent","frontmatter","pageQuery","className","color","component","dangerouslySetInnerHTML","__html"],"mappings":"8FAAA,oKAOaA,EAAwB,SAAC,GAShC,EARJC,QAQK,IAPLC,EAOI,EAPJA,QACAC,EAMI,EANJA,iBAOMC,GADF,EALJC,UAKI,EAJJC,cAII,EAHJC,iBAGI,EAFJC,QAEI,EADJC,WAEoBN,GAAoBO,KAExC,OAAO,kBAACN,EAAD,CAAaF,QAASA,KAe/BF,EAAsBW,aAAe,CACnCR,iBAAkB,KAClBF,SAAS,EACTW,MAAO,GACPC,YAAa,GACbJ,WAAY,GACZJ,UAAW,GACXC,cAAe,GACfC,iBAAkB,GAClBC,QAAS,IA6BIM,UA3BO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACCC,EAAeD,EAA/BE,eAA+BF,EAATG,KAE9B,OACE,kBAAC,IAAD,KACE,6BACA,kBAAClB,EAAD,CACEE,QAASc,EAAKG,KACdhB,iBAAkBiB,IAClBR,MAAOI,EAAKK,YAAYT,MACxBH,WAAYO,EAAKK,YAAYZ,WAC7BJ,UAAWW,EAAKK,YAAYhB,UAC5BC,cAAeU,EAAKK,YAAYf,cAChCC,iBAAkBS,EAAKK,YAAYd,iBACnCC,QAASQ,EAAKK,YAAYb,YAe3B,IAAMc,EAAS,a,kCC1EtB,2DAGaF,EAAc,SAAC,GAAD,IAAGlB,EAAH,EAAGA,QAASqB,EAAZ,EAAYA,UAAZ,OACzB,yBAAKC,MAAM,cAAcC,UAAU,OACjC,yBAAKF,UAAWA,EAAWG,wBAAyB,CAAEC,OAAQzB,OAI5DQ,EAAU,SAAC,GAAD,IAAGR,EAAH,EAAGA,QAASqB,EAAZ,EAAYA,UAAZ,OACd,yBAAKA,UAAWA,GAAYrB,IAQ9BQ,EAAQC,aAAe,CACrBT,QAAS,GACTqB,UAAW,IAKEb","file":"component---src-templates-character-page-js-7b647b8a345dd1be2ed2.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql, Link } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport Content, { HTMLContent } from \"../components/Content\";\n\nexport const CharacterPageTemplate = ({\n  preview,\n  content,\n  contentComponent,\n  topImages,\n  topLeftImages,\n  bottomLeftImages,\n  gallery,\n  characters\n}) => {\n  const PostContent = contentComponent || Content;\n\n  return <PostContent content={content} />;\n};\n\nCharacterPageTemplate.propTypes = {\n  preview: PropTypes.bool,\n  content: PropTypes.node.isRequired,\n  contentComponent: PropTypes.func,\n  description: PropTypes.string,\n  title: PropTypes.string,\n  characters: PropTypes.array,\n  topImages: PropTypes.shape(),\n  topLeftImages: PropTypes.shape(),\n  bottomLeftImages: PropTypes.shape(),\n  gallery: PropTypes.array\n};\nCharacterPageTemplate.defaultProps = {\n  contentComponent: null,\n  preview: false,\n  title: \"\",\n  description: \"\",\n  characters: [],\n  topImages: [],\n  topLeftImages: [],\n  bottomLeftImages: [],\n  gallery: []\n};\nconst CharacterPage = ({ data }) => {\n  const { markdownRemark: post, site } = data;\n\n  return (\n    <Layout>\n      <br />\n      <CharacterPageTemplate\n        content={post.html}\n        contentComponent={HTMLContent}\n        title={post.frontmatter.title}\n        characters={post.frontmatter.characters}\n        topImages={post.frontmatter.topImages}\n        topLeftImages={post.frontmatter.topLeftImages}\n        bottomLeftImages={post.frontmatter.bottomLeftImages}\n        gallery={post.frontmatter.gallery}\n      />\n    </Layout>\n  );\n};\n\nCharacterPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object,\n    site: PropTypes.object\n  }).isRequired\n};\n\nexport default CharacterPage;\n\nexport const pageQuery = graphql`\n  query CharacterPageByID($id: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      fields {\n        slug\n      }\n      html\n      frontmatter {\n        meta {\n          description\n          keywords\n        }\n        title\n        characters\n        topImages {\n          alt\n          image {\n            id\n            childImageSharp {\n              fluid(maxWidth: 1024) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n        topLeftImages {\n          alt\n          image {\n            id\n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n        bottomLeftImages {\n          alt\n          image {\n            id\n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n        gallery {\n          youtubeId\n          image {\n            id\n            childImageSharp {\n              fluid(maxWidth: 1024) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const HTMLContent = ({ content, className }) => (\n  <div color=\"textPrimary\" component=\"div\">\n    <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n  </div>\n);\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n);\n\nContent.propTypes = {\n  content: PropTypes.node,\n  className: PropTypes.string\n};\n\nContent.defaultProps = {\n  content: \"\",\n  className: \"\"\n};\n\nHTMLContent.propTypes = Content.propTypes;\n\nexport default Content;\n"],"sourceRoot":""}